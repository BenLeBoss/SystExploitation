#ifndef SHM_MESSAGE_H
#define SHM_MESSAGE_H

/** taille du message */
#define SHM_MESSAGE_NAME_SIZE 16

/** taille du message texte */
#define SHM_MESSAGE_TEXT_SIZE 64

/** un message */
typedef struct{
  char name[SHM_MESSAGE_NAME_SIZE]; /** le nom du message*/
  char text[SHM_MESSAGE_TEXT_SIZE]; /** le texte du message*/
}shm_message_t;


/**
  Copie un message source Ã  une cible (destinataire)
  \param message_source : la source du message
  \param message_target : la cible du message
  \return -1 si erreur, sinon return 0
*/
int shm_message_copy(shm_message_t message_source, shm_message_t *message_target);


/**
  Empties a message (set the message name and ther message text to an empty string)
  \param message : le message
*/
void shm_message_empty(shm_message_t *message);


/**
  Check if a message is empty (the message name and message text are empty string)
  \param message : le message
  \return -1 si le message est vide, sinon return 0
*/
int shm_message_is_empty(shm_message_t message);


/**
  Affiche un message sous le format "YYYY-MM-DD HH:MM:SS: text"
  \param message : le message
*/
void shm_message_print(shm_message_t message);


/**
  Fixe le nom du message
  \param message : le message
  \param name : le nom du message
  \return -1 si erreur, sinon return 0
*/
int shm_message_set_name(shm_message_t *message, const char *name);


/**
  Fixe le texte du message
  \param message : le message
  \param text : le texte du message
  \return -1 si erreur, sinon return 0
*/
int shm_message_set_text(shm_message_t *message, const char *text);


#endif
